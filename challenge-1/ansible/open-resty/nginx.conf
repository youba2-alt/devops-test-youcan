user root; # as /stores is shared between 2 containers
worker_processes auto;
#error_log logs/error.log info;
error_log /dev/stderr info;
pid /var/run/nginx.pid;


events {
    worker_connections 512;
    use epoll;
    multi_accept on;
}

http {

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for" ';

    #access_log logs/access.log main;
    access_log /dev/stdout main;

    keepalive_timeout 500;
    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;
    proxy_buffering off;
    proxy_request_buffering off;

    resolver 127.0.0.11 ipv6=off; # resolve docker compose services names using Docker internal dns

    server {
        listen 80;
        server_name example.com;

        location /stores {

            content_by_lua_block {
                local fs = require "fs"
                local http = require("resty.http")
                
                function string:split(delimiter)
                    local result = {}
                    local pattern = "([^" .. delimiter .. "]+)"
                    self:gsub(pattern, function(substring)
                        table.insert(result, substring)
                    end)
                    return result
                end


                local base_dir = "/stores"

                -- Extract the requested image file name from the URL
                local segments = ngx.var.uri:split("/") -- expects uri = /stores/abc-store/categorie/image-lg.jpg
                local store_name = segments[2];
                local first_dir = store_name.sub( store_name, 1, 2)
                local second_dir = store_name.sub( store_name, 3, 4)
                local image = segments[4]

                               
                local rest_path = segments[2]
                for i = 3, #segments-1 do
                    rest_path = rest_path .."/" .. segments[i]
                end

                local image_location = base_dir .. "/" .. first_dir .. "/" .. second_dir .. "/" .. rest_path .. "/" .. image


                local openPop = assert(io.popen('/usr/bin/whoami ', 'r'))
                local output = openPop:read('*all')
                openPop:close()


                local exists, err = fs.exists(image_location)
                if not exists then

                    local httpc = http.new()
                    -- Specify the URL to the php-app to get the image
                    local image_oname = image:gsub("-md","")
                    image_oname = image_oname:gsub("-sm","")
                    image_oname = image_oname:gsub("-lg","")
                    local query_params = {
                        store_id = store_name,
                        s3_image_id = image_oname,
                        image_desired_path = first_dir .. "/" .. second_dir .. "/" .. rest_path .. "/"
                    }
                    local query_string = ngx.encode_args(query_params)
                    local url = "http://php-app:8000/" .. "?" .. query_string

                    -- Send an HTTP GET request to the specified URL
                    local res, err = httpc:request_uri(url, {
                        method = "GET",
                        headers = {
                            ["User-Agent"] = "Lua rp",
                        },
                    })

                    if not res then
                        ngx.log(ngx.ERR, "Failed to send HTTP request: ", err)
                        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    end

                    if res.status ~= 200 then
                        -- The request was unsuccessful, and the response is forwarded
                        ngx.exit(res.status)
                    end

                    local exists, err = fs.exists(image_location)
                    if not exists then
                        ngx.log(ngx.ERR, "Failed ! cannot find image after request to php-app : ", err)
                        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    end
                end


                local content_type
                local file_extension = ngx.re.match(image_location, "\\.(\\w+)$", "jo")
                if file_extension then
                    local extension = file_extension[1]
                    if extension == "jpg" or extension == "jpeg" then
                        content_type = "image/jpeg"
                    elseif extension == "png" then
                        content_type = "image/png"
                    elseif extension == "bmp" then
                        content_type = "image/bmp"
                    -- Add more supported image types as needed
                    else
                        content_type = "application/octet-stream" -- Default to binary data
                    end
                else
                    content_type = "application/octet-stream" -- Default to binary data
                end

                -- Set the Content-Type header dynamically
                ngx.header["Content-Type"] = content_type
                

                ngx.log( ngx.INFO, "ngx.exec and out =>> ")

                local new_loc = image_location:gsub("/stores","")
                ngx.req.set_uri(new_loc)

                local reponse = ngx.exec("@try_files")
            }    
        }

        location @try_files {
            root /stores/;
            try_files $uri $uri/ =404;
        }

        location / {
            return 404;
        }
    }
}